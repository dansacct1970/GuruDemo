package guru.springframework.spring5webapp.domain;
import javax.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity //not sure why here. annotate the entire class. Tells hibernate this is an entity. We need a private key though or error
public class Director {

    @Id //this sets the id variable below as the private key
    @GeneratedValue(strategy = GenerationType.AUTO) //tells hibernate how it is getting generated. Syntax means the id value will be generated by the database (mySQL)
    private Long id; //private key. Still needs getters and setters
    private String firstName;
    private String lastName;
    @ManyToMany(mappedBy = "directors") //defines relationship between Director and Movie class. Directors can make multiple movies and movies can have many directors.
    private Set<Movie> movies = new HashSet<>();


    public Director() {
    }
    public Director(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getFirstName() {
        return firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public Set<Movie> getMovies() {
        return movies;
    }
    public void setMovies(Set<Movie> movies) {
        this.movies = movies;
    }

    @Override
    public String toString() {
        return "Director{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", movies=" + movies +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Director director = (Director) o;

        return Objects.equals(id, director.id);
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}
